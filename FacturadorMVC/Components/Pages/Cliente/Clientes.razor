@page "/Clientes"

@rendermode InteractiveServer
@using System.Text.Json;
@using FacturadorMVC.Modelos

<h3>Listado de clientes</h3>

<br />

<div>
    <input type="text" @bind=cuitABuscar />
    <button @onclick="() => BuscarPorCuit()"> Buscar CUIT </button>
    
    <button @onclick="() => DeshabilitarClientes()"> Deshabilitar clientes razón social empiece con Distribuidora. </button>

</div>

<br />


<p style="color:orange;">@msj</p>



<div style="display:flex; flex-direction:row;">
    <p>Cli_ID</p> <p>Razon Social</p> <p>CUIT</p> <p>Direccion</p> <p>Deshabilitado</p>
</div>

@if (lsClientes.Count < 1 || lsClientes is null)
{
    <p>sin clientes</p>
}
else
{
    @foreach (var cliente in lsClientes)
    {
        <div style="display:flex; flex-direction: row; margin: 5px;">

            <p>@cliente.Cli_ID</p>
            <p>@cliente.RazonSocial</p>
            <p>@cliente.CUIT</p>
            <p>@cliente.Direccion</p>
            <p>@cliente.Deshabilitado</p>

            <div>
                <a href="/ClienteActualizarOEliminar/@cliente.Cli_ID">  Editar  </a>
                <a href="/ClienteActualizarOEliminar/@cliente.Cli_ID">  Eliminar  </a>
            </div>

        </div>
    }

    <div>
        <a href="/ClienteNuevo">  Nuevo cliente  </a>
    </div>

}


@code
{

    List<Cliente> lsClientes = new List<Cliente>();

    Cliente oCliente = new Cliente();

    string cuitABuscar = "";
    string msj = "";

    protected override async Task OnInitializedAsync()
    {
        lsClientes = await oCliente.GetAllClientes();
    }

    public async Task BuscarPorCuit()
    {
        try
        {
            if (cuitABuscar == "")
            {
                lsClientes = await oCliente.GetAllClientes();
                return;
            }
            var lsClientesContienenCUIT = lsClientes.Where(x => x.CUIT.Contains(cuitABuscar, StringComparison.OrdinalIgnoreCase)).ToList();

            lsClientes = lsClientesContienenCUIT;

        }
        catch (Exception ex)
        {

        }
    }

    // Deshabilitar clientes para los que la razón social empiece con la palabra Distribuidora.
    public async Task DeshabilitarClientes()
    {
        try
        {
            var lsAllClientesDistribuidora = lsClientes.Where(x => x.RazonSocial.StartsWith("Distribuidora")).ToList();

            if (lsAllClientesDistribuidora.Count < 0) return;

            foreach(var cliente in lsAllClientesDistribuidora)
            {
                var url = oCliente.URL_ActualizarCliente(cliente.Cli_ID);

                if (cliente.Deshabilitado) continue;

                cliente.Deshabilitado = true;

                using (HttpClient httpClient = new HttpClient())
                {
                    var json = JsonSerializer.Serialize(cliente);

                    var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

                    var response = await httpClient.PutAsync(url, content);

                    if(response.IsSuccessStatusCode)
                    {
                        var resultado = await response.Content.ReadAsStringAsync();

                        msj += " " + resultado + " ";
                    }

                }

            }

        }
        catch (Exception ex)
        {
            msj = "Error : " + ex.Message;
        }
    }


}
